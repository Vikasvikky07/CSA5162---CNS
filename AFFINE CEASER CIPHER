#include <stdio.h>

int modInverse(int a, int m) {
    a = a % m;
    for (int x = 1; x < m; x++) {
        if ((a * x) % m == 1) {
            return x;
        }
    }
    return -1;  // Inverse does not exist
}

char encryptAffineCaesar(char plaintext, int a, int b) {
    if (isalpha(plaintext)) {
        char base = islower(plaintext) ? 'a' : 'A';
        return (char)(((a * (plaintext - base) + b) % 26) + base);
    } else {
        return plaintext;  // Preserve non-alphabetic characters
    }
}

char decryptAffineCaesar(char ciphertext, int a, int b) {
    if (isalpha(ciphertext)) {
        char base = islower(ciphertext) ? 'a' : 'A';
        int aInverse = modInverse(a, 26);
        if (aInverse != -1) {
            return (char)(((aInverse * (ciphertext - base - b + 26)) % 26) + base);
        }
    }
    return ciphertext;  // Preserve non-alphabetic characters or handle error
}

int main() {
    char plaintext[] = "HelloWorld";
    int a = 7;  // Example values for a and b
    int b = 10;

    printf("Plaintext: %s\n", plaintext);

    // Encryption
    char ciphertext[sizeof(plaintext)];
    for (int i = 0; i < sizeof(plaintext) - 1; i++) {
        ciphertext[i] = encryptAffineCaesar(plaintext[i], a, b);
    }
    ciphertext[sizeof(plaintext) - 1] = '\0';
    printf("Encrypted Text: %s\n", ciphertext);

    // Decryption
    char decryptedText[sizeof(plaintext)];
    for (int i = 0; i < sizeof(plaintext) - 1; i++) {
        decryptedText[i] = decryptAffineCaesar(ciphertext[i], a, b);
    }
    decryptedText[sizeof(plaintext) - 1] = '\0';
    printf("Decrypted Text: %s\n", decryptedText);

    return 0;
}
